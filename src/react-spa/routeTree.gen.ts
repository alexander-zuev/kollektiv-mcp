/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ConfirmOtpRouteImport } from './routes/confirm-otp'
import { Route as AuthCallbackRouteImport } from './routes/auth-callback'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LegalTermsRouteImport } from './routes/legal/terms'
import { Route as LegalRefundRouteImport } from './routes/legal/refund'
import { Route as LegalPrivacyRouteImport } from './routes/legal/privacy'

const ConfirmOtpRoute = ConfirmOtpRouteImport.update({
  id: '/confirm-otp',
  path: '/confirm-otp',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthCallbackRoute = AuthCallbackRouteImport.update({
  id: '/auth-callback',
  path: '/auth-callback',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LegalTermsRoute = LegalTermsRouteImport.update({
  id: '/legal/terms',
  path: '/legal/terms',
  getParentRoute: () => rootRouteImport,
} as any)
const LegalRefundRoute = LegalRefundRouteImport.update({
  id: '/legal/refund',
  path: '/legal/refund',
  getParentRoute: () => rootRouteImport,
} as any)
const LegalPrivacyRoute = LegalPrivacyRouteImport.update({
  id: '/legal/privacy',
  path: '/legal/privacy',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth-callback': typeof AuthCallbackRoute
  '/confirm-otp': typeof ConfirmOtpRoute
  '/legal/privacy': typeof LegalPrivacyRoute
  '/legal/refund': typeof LegalRefundRoute
  '/legal/terms': typeof LegalTermsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth-callback': typeof AuthCallbackRoute
  '/confirm-otp': typeof ConfirmOtpRoute
  '/legal/privacy': typeof LegalPrivacyRoute
  '/legal/refund': typeof LegalRefundRoute
  '/legal/terms': typeof LegalTermsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auth-callback': typeof AuthCallbackRoute
  '/confirm-otp': typeof ConfirmOtpRoute
  '/legal/privacy': typeof LegalPrivacyRoute
  '/legal/refund': typeof LegalRefundRoute
  '/legal/terms': typeof LegalTermsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth-callback'
    | '/confirm-otp'
    | '/legal/privacy'
    | '/legal/refund'
    | '/legal/terms'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth-callback'
    | '/confirm-otp'
    | '/legal/privacy'
    | '/legal/refund'
    | '/legal/terms'
  id:
    | '__root__'
    | '/'
    | '/auth-callback'
    | '/confirm-otp'
    | '/legal/privacy'
    | '/legal/refund'
    | '/legal/terms'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthCallbackRoute: typeof AuthCallbackRoute
  ConfirmOtpRoute: typeof ConfirmOtpRoute
  LegalPrivacyRoute: typeof LegalPrivacyRoute
  LegalRefundRoute: typeof LegalRefundRoute
  LegalTermsRoute: typeof LegalTermsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/confirm-otp': {
      id: '/confirm-otp'
      path: '/confirm-otp'
      fullPath: '/confirm-otp'
      preLoaderRoute: typeof ConfirmOtpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth-callback': {
      id: '/auth-callback'
      path: '/auth-callback'
      fullPath: '/auth-callback'
      preLoaderRoute: typeof AuthCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/legal/terms': {
      id: '/legal/terms'
      path: '/legal/terms'
      fullPath: '/legal/terms'
      preLoaderRoute: typeof LegalTermsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/legal/refund': {
      id: '/legal/refund'
      path: '/legal/refund'
      fullPath: '/legal/refund'
      preLoaderRoute: typeof LegalRefundRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/legal/privacy': {
      id: '/legal/privacy'
      path: '/legal/privacy'
      fullPath: '/legal/privacy'
      preLoaderRoute: typeof LegalPrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthCallbackRoute: AuthCallbackRoute,
  ConfirmOtpRoute: ConfirmOtpRoute,
  LegalPrivacyRoute: LegalPrivacyRoute,
  LegalRefundRoute: LegalRefundRoute,
  LegalTermsRoute: LegalTermsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
